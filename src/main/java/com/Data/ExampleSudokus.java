package com.Data;

public class ExampleSudokus {

    public static int[][] simpleSudokuDecimal() {

        return new int[][]{
                {0, 0, 2, 0, 0, 4, 9, 0, 0},
                {0, 4, 5, 9, 0, 0, 0, 0, 1},
                {0, 0, 1, 6, 0, 0, 0, 2, 0},
                {0, 9, 4, 0, 6, 8, 0, 0, 7},
                {0, 0, 6, 5, 0, 7, 8, 4, 9},
                {0, 0, 0, 4, 9, 0, 0, 0, 5},
                {0, 0, 0, 0, 0, 0, 7, 3, 4},
                {0, 1, 0, 0, 0, 9, 0, 0, 0},
                {0, 3, 0, 0, 4, 5, 1, 0, 2}
        };
    }

    public static int[][] mediumSudokuDecimal() {

        return new int[][]{
                {0, 4, 0, 2, 0, 0, 0, 3, 0},
                {1, 0, 0, 0, 0, 5, 0, 0, 4},
                {0, 0, 0, 7, 6, 0, 0, 0, 9},
                {0, 0, 0, 0, 0, 3, 0, 2, 6},
                {0, 0, 0, 0, 5, 0, 7, 9, 0},
                {0, 1, 0, 0, 0, 0, 0, 0, 0},
                {0, 0, 0, 9, 0, 0, 0, 7, 0},
                {7, 0, 9, 0, 4, 1, 0, 0, 0},
                {0, 0, 6, 0, 0, 0, 0, 0, 8}
        };
    }

    public static int[][] hardSudokuDecimal() {

        return new int[][]{
                {0, 0, 0, 0, 0, 0, 0, 0, 5},
                {1, 0, 9, 0, 0, 4, 0, 0, 8},
                {0, 3, 0, 5, 0, 8, 7, 9, 1},
                {0, 0, 0, 2, 0, 0, 9, 0, 0},
                {0, 0, 4, 0, 0, 0, 1, 0, 0},
                {3, 9, 1, 0, 0, 0, 8, 5, 0},
                {0, 0, 5, 0, 0, 0, 0, 4, 0},
                {9, 0, 0, 0, 0, 5, 0, 0, 0},
                {2, 7, 8, 0, 0, 0, 0, 0, 0}
        };
    }

    //TODO andere Beispiele

    public static int[][] simpleSudokuHex() {

        return new int[][]{
                {0, 0, 0, 0, 0, 9, 0, 10, 0, 0, 3, 0, 0, 0, 0, 0},
                {5, 0, 8, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 0, 13},
                {0, 0, 0, 0, 0, 0, 15, 0, 16, 0, 0, 14, 0, 0, 3, 0},
                {0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 15, 0, 0},
                {0, 0, 0, 0, 0, 13, 0, 0, 0, 15, 0, 0, 0, 8, 0, 0},
                {0, 0, 0, 0, 10, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 14},
                {8, 0, 0, 0, 0, 15, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0},
                {14, 0, 0, 11, 0, 0, 6, 0, 0, 0, 5, 0, 0, 0, 0, 0},
                {0, 0, 0, 7, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0},
                {0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 6, 0, 0, 0, 12, 0},
                {0, 0, 12, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0},
                {0, 0, 0, 0, 8, 0, 0, 0, 0, 7, 0, 0, 0, 0, 10, 0},
                {0, 4, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 7, 0, 0, 0},
                {0, 0, 0, 0, 0, 0, 0, 2, 0, 13, 0, 0, 0, 0, 0, 0},
                {0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 6, 0, 0, 8},
                {0, 13, 0, 0, 3, 0, 0, 0, 0, 0, 8, 0, 0, 0, 11, 0}
        };
    }

    public static int[][] mediumSudokuHex() {

        return new int[][]{
                {13, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 3, 0, 0, 0, 11},
                {0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0},
                {0, 0, 0, 4, 0, 0, 16, 0, 0, 12, 0, 0, 15, 0, 0, 0},
                {0, 0, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 13, 0, 0},
                {0, 9, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 8, 0},
                {0, 0, 0, 0, 2, 0, 0, 6, 0, 0, 4, 0, 0, 0, 0, 0},
                {0, 0, 14, 0, 0, 8, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0},
                {0, 0, 0, 0, 0, 0, 0, 10, 0, 9, 0, 0, 0, 0, 0, 0},
                {0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0},
                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0},
                {0, 0, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 0},
                {0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0},
                {0, 0, 0, 12, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0},
                {0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                {15, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 8, 0, 0},
                {0, 0, 0, 0, 0, 0, 0, 13, 0, 0, 0, 8, 0, 0, 0, 0}
        };
    }

    public static int[][] hardSudokuHex() {

        return new int[][]{
                {0, 6, 0, 0, 0, 9, 0, 10, 0, 0, 3, 0, 0, 0, 0, 0},
                {5, 0, 8, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 0, 13},
                {0, 0, 0, 0, 0, 0, 15, 0, 16, 0, 0, 14, 0, 0, 3, 0},
                {0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 15, 0, 0},
                {0, 0, 0, 0, 0, 13, 0, 0, 0, 15, 0, 0, 0, 8, 0, 0},
                {0, 0, 0, 0, 10, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 14},
                {8, 0, 0, 0, 0, 15, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0},
                {14, 0, 0, 11, 0, 0, 6, 0, 0, 0, 5, 0, 0, 0, 0, 0},
                {0, 0, 0, 7, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0},
                {0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 6, 0, 0, 0, 12, 0},
                {0, 0, 12, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0},
                {0, 0, 0, 0, 8, 0, 0, 0, 0, 7, 0, 0, 0, 0, 10, 0},
                {0, 4, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 7, 0, 0, 0},
                {0, 0, 0, 0, 0, 0, 0, 2, 0, 13, 0, 0, 0, 0, 0, 0},
                {0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 6, 0, 0, 8},
                {0, 13, 0, 0, 3, 0, 0, 0, 0, 0, 8, 0, 0, 0, 11, 0}
        };
    }
}
